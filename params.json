{"name":"Chef-handler-sns","tagline":"Chef report handler to send Amazon SNS notifications on failures or changes.","body":"# Chef Handler SNS\r\n[![Gem Version](http://img.shields.io/gem/v/chef-handler-sns.svg?style=flat)](http://badge.fury.io/rb/chef-handler-sns)\r\n[![Documentation](http://img.shields.io/badge/docs-rdoc.info-blue.svg?style=flat)](http://www.rubydoc.info/gems/chef-handler-sns)\r\n[![GitHub](http://img.shields.io/badge/github-zuazo/chef--handler--sns-blue.svg?style=flat)](https://github.com/zuazo/chef-handler-sns)\r\n[![License](https://img.shields.io/github/license/zuazo/chef-handler-sns.svg?style=flat)](#license-and-author)\r\n\r\n[![Dependency Status](http://img.shields.io/gemnasium/zuazo/chef-handler-sns.svg?style=flat)](https://gemnasium.com/zuazo/chef-handler-sns)\r\n[![Code Climate](http://img.shields.io/codeclimate/github/zuazo/chef-handler-sns.svg?style=flat)](https://codeclimate.com/github/zuazo/chef-handler-sns)\r\n[![Build Status](http://img.shields.io/travis/zuazo/chef-handler-sns/2.0.0.svg?style=flat)](https://travis-ci.org/zuazo/chef-handler-sns)\r\n[![Coverage Status](http://img.shields.io/coveralls/zuazo/chef-handler-sns/2.0.0.svg?style=flat)](https://coveralls.io/r/zuazo/chef-handler-sns?branch=2.0.0)\r\n[![Inline docs](http://inch-ci.org/github/zuazo/chef-handler-sns.svg?branch=master&style=flat)](http://inch-ci.org/github/zuazo/chef-handler-sns)\r\n\r\nA simple Chef report handler that reports status of a Chef run through [Amazon SNS](http://aws.amazon.com/sns/), [including IAM roles support](#usage-with-amazon-iam-roles).\r\n\r\n[Amazon SNS](http://aws.amazon.com/sns/) can send notifications by SMS, email, [Amazon SQS](http://aws.amazon.com/sqs/) queues or to any HTTP endpoint.\r\n\r\nWe recommend using the [`chef_handler_sns` cookbook](https://supermarket.chef.io/cookbooks/chef_handler_sns) for easy installation.\r\n\r\nThis Chef Handler is heavily based on [Joshua Timberman](https://github.com/jtimberman) examples.\r\n\r\n* https://docs.chef.io/handlers.html#exception-report-handlers\r\n\r\n## Requirements\r\n\r\n* Amazon AWS: uses Amazon SNS service.\r\n* Ruby `2` or higher (recommended `2.1` or higher).\r\n\r\n## Usage\r\n\r\nYou can install this handler in two ways:\r\n\r\n### Method 1: in the Chef Config File\r\n\r\nYou can install the RubyGem and configure Chef to use it:\r\n\r\n    $ gem install chef-handler-sns\r\n\r\nThen add to the configuration (`/etc/chef/solo.rb` for chef-solo or `/etc/chef/client.rb` for chef-client):\r\n\r\n```ruby\r\nrequire 'chef/handler/sns'\r\n\r\n# Create the handler\r\nsns_handler = Chef::Handler::Sns.new\r\n\r\n# Your Amazon AWS credentials\r\nsns_handler.access_key '***AMAZON-KEY***'\r\nsns_handler.secret_key '***AMAZON-SECRET***'\r\n\r\n# Some Amazon SNS configurations\r\nsns_handler.topic_arn 'arn:aws:sns:***'\r\nsns_handler.region 'us-east-1' # optional\r\n\r\n# Add your handler\r\nexception_handlers << sns_handler\r\n```\r\n\r\n### Method 2: in a Recipe with the `chef_handler` LWRP\r\n\r\n**Note:** This method will not catch errors before the convergence phase. Use the previous method if you want to be able to report such errors.\r\n\r\nUse the [`chef_handler` LWRP](https://supermarket.chef.io/cookbooks/chef_handler), creating a recipe with the following:\r\n\r\n```ruby\r\n# Handler configuration options\r\nargument_array = [\r\n  access_key: '***AMAZON-KEY***',\r\n  secret_key: '***AMAZON-SECRET***',\r\n  topic_arn: 'arn:aws:sns:***'\r\n]\r\n\r\n# Install the `chef-handler-sns` RubyGem during the compile phase\r\nchef_gem 'chef-handler-sns' do\r\n  compile_time true # Only for Chef 12\r\nend\r\n\r\n# Then activate the handler with the `chef_handler` LWRP\r\nchef_handler 'Chef::Handler::Sns' do\r\n  source 'chef/handler/sns'\r\n  arguments argument_array\r\n  supports exception: true\r\n  action :enable\r\nend\r\n```\r\n\r\nSee the [`chef_handler_sns` cookbook provider code](https://github.com/zuazo/chef_handler_sns-cookbook/blob/master/providers/default.rb) for a more complete working example.\r\n\r\n### Method 3: Using the `chef-client` Cookbook\r\n\r\nYou can also use the `node['chef_client']['config']` attribute of the [`chef-client`](https://github.com/chef-cookbooks/chef-client/tree/v4.3.2#start-report-exception-handlers) cookbook:\r\n\r\n```ruby\r\nnode.default['chef_client']['config']['exception_handlers'] = [{\r\n  'class' => 'Chef::Handler::Sns',\r\n  'arguments' => {\r\n    access_key: '***AMAZON-KEY***',\r\n    secret_key: '***AMAZON-SECRET***',\r\n    topic_arn: 'arn:aws:sns:***'\r\n  }.map { |k, v| \"#{k}: #{v.inspect}\" }\r\n}]\r\n```\r\n\r\n### Usage with Amazon IAM Roles\r\n\r\nIf you are using AWS [IAM roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html) with your server, probably you only need to specify the `topic_arn` parameter. A few simple examples:\r\n\r\n#### IAM Roles Method 1: in the Chef Config File\r\n\r\nYou can install the RubyGem and configure Chef to use it:\r\n\r\n    $ gem install chef-handler-sns\r\n\r\nThen add to the configuration (`/etc/chef/solo.rb` for chef-solo or `/etc/chef/client.rb` for chef-client):\r\n\r\n```ruby\r\nrequire 'chef/handler/sns'\r\n\r\nexception_handlers << Chef::Handler::Sns.new(\r\n  topic_arn: 'arn:aws:sns:us-east-1:12341234:MyTopicName'\r\n)\r\n```\r\n\r\n#### IAM Roles Method 2: in a Recipe with the `chef_handler` LWRP\r\n\r\nUse the [`chef_handler` LWRP](https://supermarket.chef.io/cookbooks/chef_handler), creating a recipe with the following:\r\n\r\n```ruby\r\n# Install the `chef-handler-sns` RubyGem during the compile phase\r\nchef_gem 'chef-handler-sns' do\r\n  compile_time true # Only for Chef 12\r\nend\r\n\r\n# Then activate the handler with the `chef_handler` LWRP\r\nchef_handler 'Chef::Handler::Sns' do\r\n  source 'chef/handler/sns'\r\n  arguments topic_arn: 'arn:aws:sns:us-east-1:12341234:MyTopicName'\r\n  supports exception: true\r\n  action :enable\r\nend\r\n```\r\n\r\n### IAM Roles Method 3: Using the `chef-client` Cookbook\r\n\r\nYou can also use the `node['chef_client']['config']` attribute of the [`chef-client`](https://github.com/chef-cookbooks/chef-client/tree/v4.3.2#start-report-exception-handlers) cookbook:\r\n\r\n```ruby\r\nnode.default['chef_client']['config']['exception_handlers'] = [{\r\n  'class' => 'Chef::Handler::Sns',\r\n  'arguments' => ['topic_arn: \"arn:aws:sns:***\"']\r\n}]\r\n```\r\n\r\n#### OpsWorks: Filter Notifications by Activity\r\n\r\nAn optional array of OpsWorks activities can be supplied. If the array is set, notifications will\r\nonly be triggered for the activities in the array, everything else will be discarded.\r\n\r\n```ruby\r\nargument_array = [\r\n  filter_opsworks_activities: %w(deploy configure)\r\n]\r\n```\r\n\r\n## Handler Configuration Options\r\n\r\nThe following options are available to configure the handler:\r\n\r\n* `access_key` - AWS access key (required, but will try to read it from Ohai with IAM roles).\r\n* `secret_key` - AWS secret key (required, but will try to read it from Ohai with IAM roles).\r\n* `token` - AWS security token (optional, read from Ohai with IAM roles). Set to `false` to disable the token detected by Ohai.\r\n* `topic_arn` - AWS topic ARN name (required).\r\n* `region` - AWS region (optional).\r\n* `subject` - Message subject string in erubis format (optional).\r\n* `body_template` - Full path of an erubis template file to use for the message body (optional).\r\n* `filter_opsworks_activities` - An array of OpsWorks activities to be triggered with (optional). When set, everything else will be discarded.\r\n\r\n**Note:** When the machine has an IAM role, will try to read the credentials from Ohai. So in the best case, you only need to specify the `topic_arn`.\r\n\r\n### `subject` Configuration Option\r\n\r\nHere is an example of the `subject` configuration option using the ruby configuration file (`solo.rb` or `client.rb`):\r\n\r\n```ruby\r\nsns_handler.subject(\r\n  \"Chef-run: <%= node.name %> - <%= run_status.success? ? 'ok' : 'error' %>\"\r\n)\r\n```\r\n\r\nUsing the [`chef_handler` LWRP](https://supermarket.chef.io/cookbooks/chef_handler):\r\n\r\n```ruby\r\nargument_array = [\r\n  access_key: '***AMAZON-KEY***',\r\n  secret_key: '***AMAZON-SECRET***',\r\n  topic_arn: 'arn:aws:sns:***',\r\n  subject:\r\n    \"Chef-run: <%= node.name %> - <%= run_status.success? ? 'ok' : 'error' %>\"\r\n  # [...]\r\n]\r\n\r\nchef_handler 'Chef::Handler::Sns' do\r\n  # [...]\r\n  arguments argument_array\r\nend\r\n```\r\n\r\nThe following variables are accessible inside the template:\r\n\r\n* `start_time` - The time the chef run started.\r\n* `end_time` - The time the chef run ended.\r\n* `elapsed_time` - The time elapsed between the start and finish of the chef run.\r\n* `run_context` - The Chef::RunContext object used by the chef run.\r\n* `exception` - The uncaught Exception that terminated the chef run, or nil if the run completed successfully.\r\n* `backtrace` - The backtrace captured by the uncaught exception that terminated the chef run, or nil if the run completed successfully.\r\n* `node` - The Chef::Node for this client run.\r\n* `all_resources` - An Array containing all resources in the chef-run resource collection.\r\n* `updated_resources` - An Array containing all resources that were updated during the chef run.\r\n* `success?` - Was the chef run successful? True if the chef run did not raise an uncaught exception.\r\n* `failed?` - Did the chef run fail? True if the chef run raised an uncaught exception.\r\n\r\n### `body_template` Configuration Option\r\n\r\nThis configuration option needs to contain the full path of an Erubis template. For example:\r\n\r\n```ruby\r\n# recipe 'myapp::sns_handler'\r\n\r\ncookbook_file 'chef_handler_sns_body.erb' do\r\n  path '/tmp/chef_handler_sns_body.erb'\r\n  # [...]\r\nend\r\n\r\nargument_array = [\r\n  access_key: '***AMAZON-KEY***',\r\n  secret_key: '***AMAZON-SECRET***',\r\n  topic_arn: 'arn:aws:sns:***',\r\n  body_template: '/tmp/chef_handler_sns_body.erb'\r\n  # [...]\r\n]\r\n\r\nchef_handler 'Chef::Handler::Sns' do\r\n  # [...]\r\n  arguments argument_array\r\nend\r\n```\r\n\r\n```erb\r\n<%# file 'myapp/files/default/chef_handler_sns_body.erb' %>\r\n\r\nNode Name: <%= node.name %>\r\n<% if node.attribute?('fqdn') -%>\r\nHostname: <%= node.fqdn %>\r\n<% end -%>\r\n\r\nChef Run List: <%= node.run_list.to_s %>\r\nChef Environment: <%= node.chef_environment %>\r\n\r\n<% if node.attribute?('ec2') -%>\r\nInstance Id: <%= node.ec2.instance_id %>\r\nInstance Public Hostname: <%= node.ec2.public_hostname %>\r\nInstance Hostname: <%= node.ec2.hostname %>\r\nInstance Public IPv4: <%= node.ec2.public_ipv4 %>\r\nInstance Local IPv4: <%= node.ec2.local_ipv4 %>\r\n<% end -%>\r\n\r\nChef Client Elapsed Time: <%= elapsed_time.to_s %>\r\nChef Client Start Time: <%= start_time.to_s %>\r\nChef Client Start Time: <%= end_time.to_s %>\r\n\r\n<% if exception -%>\r\nException: <%= run_status.formatted_exception %>\r\nStacktrace:\r\n<%= Array(backtrace).join(\"\\n\") %>\r\n\r\n<% end -%>\r\n```\r\n\r\nSee the [subject](#subject) documentation for more details on the variables accessible inside the template.\r\n\r\n## IAM Role Credentials from Ohai\r\n\r\nIAM Role information and credentials are gathered from Ohai by default if they exists.\r\n\r\nNo aditional Ohai plugin is required. This is natively supported by Ohai since version `6.16.0` ([OHAI-400](https://tickets.opscode.com/browse/OHAI-400)).\r\n\r\nThese are the used Ohai attributes:\r\n\r\n```\r\nec2\r\n├── placement_availability_zone: region is set from here.\r\n└── iam\r\n    └── security-credentials\r\n        └── IAMRoleName\r\n            ├── AccessKeyId\r\n            ├── SecretAccessKey\r\n            └── Token\r\n```\r\n\r\n## Testing\r\n\r\nSee [TESTING.md](https://github.com/zuazo/chef-handler-sns/blob/master/TESTING.md).\r\n\r\n## Contributing\r\n\r\nPlease do not hesitate to [open an issue](https://github.com/zuazo/chef-handler-sns/issues/new) with any questions or problems.\r\n\r\nSee [CONTRIBUTING.md](https://github.com/zuazo/chef-handler-sns/blob/master/CONTRIBUTING.md).\r\n\r\n## TODO\r\n\r\nSee [TODO.md](https://github.com/zuazo/chef-handler-sns/blob/master/TODO.md).\r\n\r\n## License and Author\r\n\r\n|                      |                                          |\r\n|:---------------------|:-----------------------------------------|\r\n| **Author:**          | [Xabier de Zuazo](https://github.com/zuazo) (<xabier@zuazo.org>)\r\n| **Contributor:**     | [Florian Holzhauer](https://github.com/fh)\r\n| **Contributor:**     | [Michael Hobbs](https://github.com/michaelshobbs)\r\n| **Copyright:**       | Copyright (c) 2015 Xabier de Zuazo\r\n| **Copyright:**       | Copyright (c) 2013-2014 Onddo Labs, SL.\r\n| **License:**         | Apache License, Version 2.0\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n    \r\n        http://www.apache.org/licenses/LICENSE-2.0\r\n    \r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n    \r\n","google":"UA-38093658-2","note":"Don't delete this file! It's used internally to help with page regeneration."}