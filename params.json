{"name":"Chef-handler-sns","tagline":"Chef report handler to send Amazon SNS notifications on failures or changes.","body":"# Chef Handler SNS\r\n\r\nA simple Chef report handler that reports status of a Chef run through Amazon SNS.\r\n\r\nThis Chef Handler is heavily based on [Joshua Timberman](https://github.com/jtimberman) examples.\r\n\r\n* http://wiki.opscode.com/display/chef/Exception+and+Report+Handlers\r\n\r\n[![Gem Version](https://badge.fury.io/rb/chef-handler-sns.png)](http://badge.fury.io/rb/chef-handler-sns)\r\n[![Dependency Status](https://gemnasium.com/onddo/chef-handler-sns.png)](https://gemnasium.com/onddo/chef-handler-sns)\r\n[![Code Climate](https://codeclimate.com/github/onddo/chef-handler-sns.png)](https://codeclimate.com/github/onddo/chef-handler-sns)\r\n[![Build Status](https://travis-ci.org/onddo/chef-handler-sns.png)](https://travis-ci.org/onddo/chef-handler-sns)\r\n\r\n## Requirements\r\n\r\n* Amazon AWS: uses Amazon SNS service.\r\n* Uses the `right_aws` library.\r\n\r\n## Usage\r\n\r\nYou can install this handler in two ways:\r\n\r\n### Method 1: In the Chef config file\r\n\r\nYou can install the RubyGem and configure Chef to use it:\r\n\r\n    gem install chef-handler-sns\r\n\r\nThen add to the configuration (`/etc/chef/solo.rb` for chef-solo or `/etc/chef/client.rb` for chef-client):\r\n\r\n```ruby\r\nrequire \"chef/handler/sns\"\r\n\r\n# Create the handler\r\nsns_handler = Chef::Handler::Sns.new\r\n\r\n# Your Amazon AWS credentials\r\nsns_handler.access_key \"***AMAZON-KEY***\"\r\nsns_handler.secret_key \"***AMAZON-SECRET***\"\r\n\r\n# Some Amazon SNS configurations\r\nsns_handler.topic_arn \"arn:aws:sns:***\"\r\nsns_handler.region \"us-east-1\" # optional\r\n\r\n# Add your handler\r\nexception_handlers << sns_handler\r\n```\r\n\r\n### Method 2: In a recipe with the chef_handler LWRP\r\n\r\nUse the [chef_handler LWRP](http://community.opscode.com/cookbooks/chef_handler), creating a recipe with the following:\r\n\r\n```ruby\r\n# Handler configuration options\r\nargument_array = [\r\n  :access_key => \"***AMAZON-KEY***\",\r\n  :secret_key => \"***AMAZON-SECRET***\",\r\n  :topic_arn => \"arn:aws:sns:***\",\r\n]\r\n\r\n# Install the `chef-handler-sns` RubyGem during the compile phase\r\nchef_gem \"chef-handler-sns\"\r\n\r\n# Then activate the handler with the `chef_handler` LWRP\r\nchef_handler \"Chef::Handler::Sns\" do\r\n  source \"#{Gem::Specification.find_by_name(\"chef-handler-sns\").lib_dirs_glob}/chef/handler/sns\"\r\n  arguments argument_array\r\n  supports :exception => true\r\n  action :enable\r\nend\r\n```\r\n\r\nIf you have an old version of gem package (< 1.8.6) without `find_by_name` or old chef-client (< 0.10.10) without `chef_gem`, you can try creating a recipe similar to the following:\r\n\r\n```ruby\r\n# Handler configuration options\r\nargument_array = [\r\n  :access_key => \"***AMAZON-KEY***\",\r\n  :secret_key => \"***AMAZON-SECRET***\",\r\n  :topic_arn => \"arn:aws:sns:***\",\r\n]\r\n\r\n# Install the `chef-handler-sns` RubyGem during the compile phase\r\nif defined?(Chef::Resource::ChefGem)\r\n  chef_gem \"chef-handler-sns\"\r\nelse\r\n  gem_package(\"chef-handler-sns\") do\r\n    action :nothing\r\n  end.run_action(:install)\r\nend\r\n\r\n# Get the installed `chef-handler-sns` gem path\r\nsns_handler_path = Gem::Specification.respond_to?(\"find_by_name\") ?\r\n  Gem::Specification.find_by_name(\"chef-handler-sns\").lib_dirs_glob :\r\n  Gem.all_load_paths.grep(/chef-handler-sns/).first\r\n\r\n# Then activate the handler with the `chef_handler` LWRP\r\nchef_handler \"Chef::Handler::Sns\" do\r\n  source \"#{sns_handler_path}/chef/handler/sns\"\r\n  arguments argument_array\r\n  supports :exception => true\r\n  action :enable\r\nend\r\n```\r\n\r\n## Handler Configuration Options\r\n\r\nThe following options are available to configure the handler:\r\n\r\n* `access_key` - AWS access key (required).\r\n* `secret_key` - AWS secret key (required).\r\n* `topic_arn` - AWS topic ARN name (required).\r\n* `region` - AWS region (optional).\r\n* `subject` - Message subject string in erubis format (optional).\r\n* `body_template` - Full path of an erubis template file to use for the message body (optional).\r\n\r\n### subject\r\n\r\nHere is an example of the `subject` configuration option using the ruby configuration file (`solo.rb` or `client.rb`):\r\n\r\n```ruby\r\nsns_handler.subject: \"Chef-run: <%= node.name %> - <%= run_status.success? ? 'ok' : 'error' %>\"\r\n```\r\n\r\nUsing the [chef_handler LWRP](http://community.opscode.com/cookbooks/chef_handler):\r\n```ruby\r\nargument_array = [\r\n  :access_key => \"***AMAZON-KEY***\",\r\n  :secret_key => \"***AMAZON-SECRET***\",\r\n  :topic_arn => \"arn:aws:sns:***\",\r\n  :subject => \"Chef-run: <%= node.name %> - <%= run_status.success? ? 'ok' : 'error' %>\",\r\n  # [...]\r\n]\r\nchef_handler \"Chef::Handler::Sns\" do\r\n  # [...]\r\n  arguments argument_array\r\nend\r\n```\r\n\r\nThe following variables are accesible inside the template:\r\n\r\n* `start_time` - The time the chef run started.\r\n* `end_time` - The time the chef run ended.\r\n* `elapsed_time` - The time elapsed between the start and finish of the chef run.\r\n* `run_context` - The Chef::RunContext object used by the chef run.\r\n* `exception` - The uncaught Exception that terminated the chef run, or nil if the run completed successfully.\r\n* `backtrace` - The backtrace captured by the uncaught exception that terminated the chef run, or nil if the run completed successfully.\r\n* `node` - The Chef::Node for this client run.\r\n* `all_resources` - An Array containing all resources in the chef run's resource_collection.\r\n* `updated_resources` - An Array containing all resources that were updated during the chef run.\r\n* `success?` - Was the chef run successful? True if the chef run did not raise an uncaught exception.\r\n* `failed?` - Did the chef run fail? True if the chef run raised an uncaught exception.\r\n\r\n### body_template\r\n\r\nThis configuration option needs to contain the full path of an erubis template. For example:\r\n\r\n```ruby\r\n# recipe \"myapp::sns_handler\"\r\n\r\ncookbook_file \"chef_handler_sns_body.erb\" do\r\n  path \"/tmp/chef_handler_sns_body.erb\"\r\n  # [...]\r\nend\r\n\r\nargument_array = [\r\n  :access_key => \"***AMAZON-KEY***\",\r\n  :secret_key => \"***AMAZON-SECRET***\",\r\n  :topic_arn => \"arn:aws:sns:***\",\r\n  :body_template => \"/tmp/chef_handler_sns_body.erb\",\r\n  # [...]\r\n]\r\nchef_handler \"Chef::Handler::Sns\" do\r\n  # [...]\r\n  arguments argument_array\r\nend\r\n```\r\n\r\n```erb\r\n<%# file \"myapp/files/default/chef_handler_sns_body.erb\" %>\r\n\r\nNode Name: <%= node.name %>\r\n<% if node.attribute?(\"fqdn\") -%>\r\nHostname: <%= node.fqdn %>\r\n<% end -%>\r\n\r\nChef Run List: <%= node.run_list.to_s %>\r\nChef Environment: <%= node.chef_environment %>\r\n\r\n<% if node.attribute?(\"ec2\") -%>\r\nInstance Id: <%= node.ec2.instance_id %>\r\nInstance Public Hostname: <%= node.ec2.public_hostname %>\r\nInstance Hostname: <%= node.ec2.hostname %>\r\nInstance Public IPv4: <%= node.ec2.public_ipv4 %>\r\nInstance Local IPv4: <%= node.ec2.local_ipv4 %>\r\n<% end -%>\r\n\r\nChef Client Elapsed Time: <%= elapsed_time.to_s %>\r\nChef Client Start Time: <%= start_time.to_s %>\r\nChef Client Start Time: <%= end_time.to_s %>\r\n\r\n<% if exception -%>\r\nException: <%= run_status.formatted_exception %>\r\nStacktrace:\r\n<%= Array(backtrace).join(\"\\n\") %>\r\n\r\n<% end -%>\r\n```\r\n\r\nSee the [subject](#subject) documentation for more details on the variables accesible inside the template.\r\n\r\n## Running the tests\r\n\r\nMinitest tests can be run as usual:\r\n\r\n    rake test\r\n\r\n## Contributing\r\n\r\n[Pull Requests](http://github.com/onddo/chef-handler-sns/pulls) are welcome.\r\n\r\n## License and Author\r\n\r\n|                      |                                          |\r\n|:---------------------|:-----------------------------------------|\r\n| **Author:**          | Xabier de Zuazo (<xabier@onddo.com>)\r\n| **Copyright:**       | Copyright (c) 2013 Onddo Labs, SL. (www.onddo.com)\r\n| **License:**         | Apache License, Version 2.0\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n","google":"UA-38093658-2","note":"Don't delete this file! It's used internally to help with page regeneration."}